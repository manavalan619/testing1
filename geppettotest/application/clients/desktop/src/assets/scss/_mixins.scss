// SASS Mixins for reskin implementation

// ATTENTION:
// CHECKTHIS: Could set .mat-raised-button to new style (globally)

@mixin container-topBar() {
	border-top: 1px solid $color_border_topbar;
	border-bottom: 1px solid $color_bg_topbar;
	background-color: $color_bg_topbar;
	color: #fff;
	// padding-top: rem-calc(18);
	// padding-bottom: rem-calc(18);
	// height: 58px;

	.lang-item,
	.about-span {
		font-weight: bold;
		color: inherit;
		text-decoration: none;
		// font-size: rem-calc(18);
		font-size: 1rem;
	}

	.current.lang-item {
		text-decoration: underline;
	}
}

@mixin container-header() {
	background-color: $color_geppetto_darkblue;
	color: #fff;
	top: 0px;
	background-image: $gradient_bg_header;
	color: #fff;
	border-radius: 0;
	// top: 57px;
	// height: 110px;
}

@mixin header-logo() {
	img {
		visibility: hidden;
	}

	background: transparent url('/assets/img/skin/logo-geppetto.svg') center center no-repeat;
	background-size: contain;
}

@mixin main-navigation() {
	.navigation-items {
		.btn {
			@include button-header();
		}

		.dropdown-menu {
			padding: 0.3rem;

			option {
				padding: 0.2rem 0.9rem;
				display: block;
				border-radius: 3px;

				&:hover {
					background-color: $color_geppetto_darkblue;
					color: #fff;
					cursor: pointer;
				}
			}
		}
	}
}

@mixin container-home-main() {
	background: $white;
	height: calc(100vh - 86px);
	flex-basis: auto;

	.btn[_ngcontent-c4] {
		position: relative;
		z-index: 1000;
		padding-top: 0.5%;

		button {
			@include button-header();
		}
	}
}

@mixin button-base {
	@include transition-effect;
	display: inline-block;
	border-radius: $m_radius;
	line-height: 1;
	cursor: pointer;

	&:active {
		position: relative;
		top: 1px;
	}
}

@mixin button-header {
	@include button-base;
	border: 2px solid $white;
	color: $white;
	font-size: rem-calc(20);
	padding: 0.42em 0.80em;
	background-color: rgba(255, 255, 255, 0);

	&:hover {
		background-color: $white;
		color: $color_geppetto_darkblue;
	}
}

@mixin button-style($fontSize: 1.2rem, $bottomBorderWidth: 3px) {
	@include button-base;
	color: $white;
	background-color: $color_button;
	border-bottom: $bottomBorderWidth solid $color_button_border;
	text-transform: uppercase;
	font-weight: bold;
	min-width: 10rem;
	font-size: $fontSize;
	padding: 0.8em 1.5em calc(0.8em - #{$bottomBorderWidth});
	box-shadow: $shadow_button;

	&:hover {
		background-color: darken($color_button, 5%);
		border-bottom-color: lighten($color_button_border, 3%);
	}
}

// Removed the class name for login as the footer was conflicting with the login card
@mixin modal-login() {
	top: 0;
	left: 0;
	margin: 10% auto;
	background-color: #f7f7f7;
	box-shadow: 2px 3px 5px rgba(0, 0, 0, 0.75) !important;
	border: 1px solid #fafafa;
	text-align: center;
	max-width: 43em;

	button {
		@include button-style(1rem);
		margin-bottom: 1rem;
	}

	// .mat-form-field-appearance-outline.mat-form-field-infix {
	// 	border-color: $color_base_text;
	// 	padding: 0.5em 0;
	// 	width: 100%;
	// }
	.mat-form-field {
		.mat-form-field-infix {
			padding: 0.3rem 0 0.4rem;
			border-width: 0.7rem;
		}

		input[_ngcontent-c4],
		input[_ngcontent-c5] {
			border: 0 none;
		}

		.mat-form-field-appearance-outline .mat-form-field-outline-start {
			border-radius: $m_radius 0 0 $m_radius;
		}

		.mat-form-field-appearance-outline .mat-form-field-outline-end {
			border-radius: 0 $m_radius $m_radius 0;
		}

		&.password {

			.eye[_ngcontent-c4],
			.eye[_ngcontent-c5] {
				margin-left: -16px !important;
				margin-top: 6px !important;
			}
		}
	}

	.mat-input-element {
		@include text-field();
		font-size: 1.3rem;

		label {
			color: $color_base_text;
		}

		&:focus+.mat-form-field-label-wrapper>label,
		&:focus+.eye+.mat-form-field-label-wrapper>label {
			margin-bottom: 0;
			margin-top: 0.25rem;
			// background-color: $color_bg_login;
		}
	}

	.mat-card-header {
		margin-left: 0;
		text-align: center;
		justify-content: center;

		.mat-card-avatar,
		img {
			display: none;
		}

		.mat-card-header-text {
			margin: 0;

			&::before {
				content: "Login";
				display: inline-block;
				font-size: rem-calc(35);
				color: $color_base_text;
				font-weight: bold;
			}
		}
	}

	.loginname[_ngcontent-c4],
	.loginname[_ngcontent-c5] {
		margin-top: 2rem;
	}
}

@mixin text-field {
	font-size: rem-calc(24);
	color: $color_base_text;
	line-height: 1
}

@mixin container-projects-dashboard() {
	margin-top: 145px;

	.row-button .mat-raised-button {
		@include button-style();
	}

	@include element-accordion;
	@include element-card;
}

@mixin element-accordion() {
	.mat-accordion>.mat-expansion-panel {
		box-shadow: none;
		color: $black;
		border: 1px solid $color_accordion_bd;
		border-bottom-color: $color_accordion_bd_bottom;
		border-radius: 0;

		&:not(:last-child) {
			margin-bottom: rem-calc(22);
		}
	}

	.mat-expansion-indicator::after {
		color: $color_geppetto_darkblue;
		padding: 6px;
		border-width: 0 4px 4px 0;
		margin-top: -6px;
	}

	.mat-expansion-panel-header-title {
		color: $color_text_light;
		font-size: rem-calc(24);
	}

	.mat-expansion-panel-header {
		font-weight: bold;

		&.mat-expanded {
			background-color: $color_geppetto_darkblue;

			.mat-expansion-panel-header-title,
			.mat-expansion-indicator::after {
				color: #fff;
			}

			+.mat-expansion-panel-content {
				padding-top: 2rem;
			}
		}
	}
}

@mixin element-card() {
	.sitecard {
		border: 1px solid $white;
		padding-top: 60%;

		.sitecard-preview,
		.sitecard-preview-c {
			@include absolute-fill-parent-container();

			background-position: top left;
			background-size: cover;
		}

		.sitecard-info {
			z-index: 10;
			pointer-events: none;
			text-shadow: 0 0 2px rgba(255, 255, 255, 0.9);
		}

		.sitecard-title {
			font-size: rem-calc(27);
			font-weight: bold;
			margin-bottom: 0.3rem;
		}

		.sitecard-desc {
			max-height: 60px;
			height: auto;
			margin-bottom: 1em;
		}

		.sitecard__pub-info {
			opacity: 0.9;
			font-style: italic;
		}

		.sitecard-actions {
			position: relative;
			z-index: 10;
			margin-right: 0.45rem;
			bottom: 0.45rem;
			margin-left: 0.45rem;

			.sitecard-action {
				@include transition-effect(background-color);
				height: 24px;
				box-sizing: content-box;
				text-align: center;
				opacity: 0.8;
				padding: 6px;

				mat-icon {
					display: none
				}

				&:hover {
					opacity: 1;
					background-color: $color_geppetto_darkblue;
				}

				&::before {
					content: "";
					display: inline-block;
					width: 24px;
					height: 24px;
					background-size: contain;
					background-color: transparent;
					background-position: center center;
					background-repeat: no-repeat;
				}

				&[data-original-title="Edit"]::before {
					background-image: url('/assets/img/skin/icon_edit_white.svg');
				}

				&[data-original-title="Clone"]::before {
					background-image: url('/assets/img/skin/icon_duplicate_white.svg');
				}

				&[data-original-title="Settings"]::before {
					background-image: url('/assets/img/skin/icon_download_white.svg');
				}

				&.entity-action-remove::before {
					background-image: url('/assets/img/skin/icon_delete_white.svg');
				}
			}

			.sitecard-action-c {
				background-color: rgba($color_geppetto_darkblue, 0.8);
				border-top: 0 none;
				border-left: 1px solid rgba(255, 255, 255, 0.4);
				border-right: 1px solid rgba(255, 255, 255, 0.4);

				&:first-child {
					border-left: none;
				}

				&:last-child {
					border-right: none;
				}
			}
		}
	}
}

@mixin virtual-footer() {
	padding-bottom: calc(120px + 3em);

	&::after {
		display: block;
		content: "Geppetto 2019. All Rights Reserved";
		color: rgba(255, 255, 255, 0.71);
		background: $color_bg_footer url('/assets/img/skin/decor_puzzle-piece_slanted.svg') 110% 0 no-repeat;
		background-size: auto 200%;
		line-height: 120px;
		padding: 0 calc(50% - #{$m_footer_width / 2});
		position: fixed;
		bottom: 0;
		left: 0;
		right: 0;
		top: auto;
	}
}

// Utility Mixins
@mixin transition-effect($property: all, $speed: $m_transition-speed, $ease: linear) {
	transition: $property $speed $ease;
}

@mixin absolute-centered-in-container() {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

@mixin absolute-fill-parent-container() {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	height: auto;
	width: auto;
}

// Utility Functions
@function rem-calc($size) {
	$remSize: $size / 16;
	@return #{$remSize}rem;
}